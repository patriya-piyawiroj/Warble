// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: func.proto

#include "func.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fany_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Any_google_2fprotobuf_2fany_2eproto;
namespace func {
class HookRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HookRequest> _instance;
} _HookRequest_default_instance_;
class HookReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HookReply> _instance;
} _HookReply_default_instance_;
class UnhookRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnhookRequest> _instance;
} _UnhookRequest_default_instance_;
class UnhookReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnhookReply> _instance;
} _UnhookReply_default_instance_;
class EventRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EventRequest> _instance;
} _EventRequest_default_instance_;
class EventReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EventReply> _instance;
} _EventReply_default_instance_;
}  // namespace func
static void InitDefaultsscc_info_EventReply_func_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::func::_EventReply_default_instance_;
    new (ptr) ::func::EventReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::func::EventReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EventReply_func_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EventReply_func_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_EventRequest_func_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::func::_EventRequest_default_instance_;
    new (ptr) ::func::EventRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::func::EventRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EventRequest_func_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EventRequest_func_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_HookReply_func_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::func::_HookReply_default_instance_;
    new (ptr) ::func::HookReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::func::HookReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HookReply_func_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HookReply_func_2eproto}, {}};

static void InitDefaultsscc_info_HookRequest_func_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::func::_HookRequest_default_instance_;
    new (ptr) ::func::HookRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::func::HookRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HookRequest_func_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HookRequest_func_2eproto}, {}};

static void InitDefaultsscc_info_UnhookReply_func_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::func::_UnhookReply_default_instance_;
    new (ptr) ::func::UnhookReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::func::UnhookReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnhookReply_func_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnhookReply_func_2eproto}, {}};

static void InitDefaultsscc_info_UnhookRequest_func_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::func::_UnhookRequest_default_instance_;
    new (ptr) ::func::UnhookRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::func::UnhookRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnhookRequest_func_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnhookRequest_func_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_func_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_func_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_func_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_func_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::func::HookRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::func::HookRequest, event_type_),
  PROTOBUF_FIELD_OFFSET(::func::HookRequest, event_function_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::func::HookReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::func::UnhookRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::func::UnhookRequest, event_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::func::UnhookReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::func::EventRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::func::EventRequest, event_type_),
  PROTOBUF_FIELD_OFFSET(::func::EventRequest, payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::func::EventReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::func::EventReply, payload_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::func::HookRequest)},
  { 7, -1, sizeof(::func::HookReply)},
  { 12, -1, sizeof(::func::UnhookRequest)},
  { 18, -1, sizeof(::func::UnhookReply)},
  { 23, -1, sizeof(::func::EventRequest)},
  { 30, -1, sizeof(::func::EventReply)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::func::_HookRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::func::_HookReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::func::_UnhookRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::func::_UnhookReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::func::_EventRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::func::_EventReply_default_instance_),
};

const char descriptor_table_protodef_func_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nfunc.proto\022\004func\032\031google/protobuf/any."
  "proto\"9\n\013HookRequest\022\022\n\nevent_type\030\001 \001(\005"
  "\022\026\n\016event_function\030\002 \001(\t\"\013\n\tHookReply\"#\n"
  "\rUnhookRequest\022\022\n\nevent_type\030\001 \001(\005\"\r\n\013Un"
  "hookReply\"I\n\014EventRequest\022\022\n\nevent_type\030"
  "\001 \001(\005\022%\n\007payload\030\002 \001(\0132\024.google.protobuf"
  ".Any\"3\n\nEventReply\022%\n\007payload\030\001 \001(\0132\024.go"
  "ogle.protobuf.Any2\240\001\n\013FuncService\022,\n\004hoo"
  "k\022\021.func.HookRequest\032\017.func.HookReply\"\000\022"
  "2\n\006unhook\022\023.func.UnhookRequest\032\021.func.Un"
  "hookReply\"\000\022/\n\005event\022\022.func.EventRequest"
  "\032\020.func.EventReply\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_func_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_func_2eproto_sccs[6] = {
  &scc_info_EventReply_func_2eproto.base,
  &scc_info_EventRequest_func_2eproto.base,
  &scc_info_HookReply_func_2eproto.base,
  &scc_info_HookRequest_func_2eproto.base,
  &scc_info_UnhookReply_func_2eproto.base,
  &scc_info_UnhookRequest_func_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_func_2eproto_once;
static bool descriptor_table_func_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_func_2eproto = {
  &descriptor_table_func_2eproto_initialized, descriptor_table_protodef_func_2eproto, "func.proto", 468,
  &descriptor_table_func_2eproto_once, descriptor_table_func_2eproto_sccs, descriptor_table_func_2eproto_deps, 6, 1,
  schemas, file_default_instances, TableStruct_func_2eproto::offsets,
  file_level_metadata_func_2eproto, 6, file_level_enum_descriptors_func_2eproto, file_level_service_descriptors_func_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_func_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_func_2eproto), true);
namespace func {

// ===================================================================

void HookRequest::InitAsDefaultInstance() {
}
class HookRequest::_Internal {
 public:
};

HookRequest::HookRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:func.HookRequest)
}
HookRequest::HookRequest(const HookRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  event_function_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_event_function().empty()) {
    event_function_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.event_function_);
  }
  event_type_ = from.event_type_;
  // @@protoc_insertion_point(copy_constructor:func.HookRequest)
}

void HookRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HookRequest_func_2eproto.base);
  event_function_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  event_type_ = 0;
}

HookRequest::~HookRequest() {
  // @@protoc_insertion_point(destructor:func.HookRequest)
  SharedDtor();
}

void HookRequest::SharedDtor() {
  event_function_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HookRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HookRequest& HookRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HookRequest_func_2eproto.base);
  return *internal_default_instance();
}


void HookRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:func.HookRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_function_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  event_type_ = 0;
  _internal_metadata_.Clear();
}

const char* HookRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 event_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          event_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string event_function = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_event_function();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "func.HookRequest.event_function"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HookRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:func.HookRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 event_type = 1;
  if (this->event_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_event_type(), target);
  }

  // string event_function = 2;
  if (this->event_function().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_event_function().data(), static_cast<int>(this->_internal_event_function().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "func.HookRequest.event_function");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_event_function(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:func.HookRequest)
  return target;
}

size_t HookRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:func.HookRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string event_function = 2;
  if (this->event_function().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_event_function());
  }

  // int32 event_type = 1;
  if (this->event_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_event_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HookRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:func.HookRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const HookRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HookRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:func.HookRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:func.HookRequest)
    MergeFrom(*source);
  }
}

void HookRequest::MergeFrom(const HookRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:func.HookRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.event_function().size() > 0) {

    event_function_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.event_function_);
  }
  if (from.event_type() != 0) {
    _internal_set_event_type(from._internal_event_type());
  }
}

void HookRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:func.HookRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HookRequest::CopyFrom(const HookRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:func.HookRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HookRequest::IsInitialized() const {
  return true;
}

void HookRequest::InternalSwap(HookRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  event_function_.Swap(&other->event_function_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(event_type_, other->event_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HookRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HookReply::InitAsDefaultInstance() {
}
class HookReply::_Internal {
 public:
};

HookReply::HookReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:func.HookReply)
}
HookReply::HookReply(const HookReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:func.HookReply)
}

void HookReply::SharedCtor() {
}

HookReply::~HookReply() {
  // @@protoc_insertion_point(destructor:func.HookReply)
  SharedDtor();
}

void HookReply::SharedDtor() {
}

void HookReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HookReply& HookReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HookReply_func_2eproto.base);
  return *internal_default_instance();
}


void HookReply::Clear() {
// @@protoc_insertion_point(message_clear_start:func.HookReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* HookReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HookReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:func.HookReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:func.HookReply)
  return target;
}

size_t HookReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:func.HookReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HookReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:func.HookReply)
  GOOGLE_DCHECK_NE(&from, this);
  const HookReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HookReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:func.HookReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:func.HookReply)
    MergeFrom(*source);
  }
}

void HookReply::MergeFrom(const HookReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:func.HookReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void HookReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:func.HookReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HookReply::CopyFrom(const HookReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:func.HookReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HookReply::IsInitialized() const {
  return true;
}

void HookReply::InternalSwap(HookReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HookReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnhookRequest::InitAsDefaultInstance() {
}
class UnhookRequest::_Internal {
 public:
};

UnhookRequest::UnhookRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:func.UnhookRequest)
}
UnhookRequest::UnhookRequest(const UnhookRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  event_type_ = from.event_type_;
  // @@protoc_insertion_point(copy_constructor:func.UnhookRequest)
}

void UnhookRequest::SharedCtor() {
  event_type_ = 0;
}

UnhookRequest::~UnhookRequest() {
  // @@protoc_insertion_point(destructor:func.UnhookRequest)
  SharedDtor();
}

void UnhookRequest::SharedDtor() {
}

void UnhookRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnhookRequest& UnhookRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnhookRequest_func_2eproto.base);
  return *internal_default_instance();
}


void UnhookRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:func.UnhookRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_type_ = 0;
  _internal_metadata_.Clear();
}

const char* UnhookRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 event_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          event_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnhookRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:func.UnhookRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 event_type = 1;
  if (this->event_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_event_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:func.UnhookRequest)
  return target;
}

size_t UnhookRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:func.UnhookRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 event_type = 1;
  if (this->event_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_event_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnhookRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:func.UnhookRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UnhookRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnhookRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:func.UnhookRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:func.UnhookRequest)
    MergeFrom(*source);
  }
}

void UnhookRequest::MergeFrom(const UnhookRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:func.UnhookRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.event_type() != 0) {
    _internal_set_event_type(from._internal_event_type());
  }
}

void UnhookRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:func.UnhookRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnhookRequest::CopyFrom(const UnhookRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:func.UnhookRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnhookRequest::IsInitialized() const {
  return true;
}

void UnhookRequest::InternalSwap(UnhookRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(event_type_, other->event_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnhookRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnhookReply::InitAsDefaultInstance() {
}
class UnhookReply::_Internal {
 public:
};

UnhookReply::UnhookReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:func.UnhookReply)
}
UnhookReply::UnhookReply(const UnhookReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:func.UnhookReply)
}

void UnhookReply::SharedCtor() {
}

UnhookReply::~UnhookReply() {
  // @@protoc_insertion_point(destructor:func.UnhookReply)
  SharedDtor();
}

void UnhookReply::SharedDtor() {
}

void UnhookReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnhookReply& UnhookReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnhookReply_func_2eproto.base);
  return *internal_default_instance();
}


void UnhookReply::Clear() {
// @@protoc_insertion_point(message_clear_start:func.UnhookReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* UnhookReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnhookReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:func.UnhookReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:func.UnhookReply)
  return target;
}

size_t UnhookReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:func.UnhookReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnhookReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:func.UnhookReply)
  GOOGLE_DCHECK_NE(&from, this);
  const UnhookReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnhookReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:func.UnhookReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:func.UnhookReply)
    MergeFrom(*source);
  }
}

void UnhookReply::MergeFrom(const UnhookReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:func.UnhookReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void UnhookReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:func.UnhookReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnhookReply::CopyFrom(const UnhookReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:func.UnhookReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnhookReply::IsInitialized() const {
  return true;
}

void UnhookReply::InternalSwap(UnhookReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnhookReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EventRequest::InitAsDefaultInstance() {
  ::func::_EventRequest_default_instance_._instance.get_mutable()->payload_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
}
class EventRequest::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& payload(const EventRequest* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
EventRequest::_Internal::payload(const EventRequest* msg) {
  return *msg->payload_;
}
void EventRequest::clear_payload() {
  if (GetArenaNoVirtual() == nullptr && payload_ != nullptr) {
    delete payload_;
  }
  payload_ = nullptr;
}
EventRequest::EventRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:func.EventRequest)
}
EventRequest::EventRequest(const EventRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_payload()) {
    payload_ = new PROTOBUF_NAMESPACE_ID::Any(*from.payload_);
  } else {
    payload_ = nullptr;
  }
  event_type_ = from.event_type_;
  // @@protoc_insertion_point(copy_constructor:func.EventRequest)
}

void EventRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EventRequest_func_2eproto.base);
  ::memset(&payload_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&event_type_) -
      reinterpret_cast<char*>(&payload_)) + sizeof(event_type_));
}

EventRequest::~EventRequest() {
  // @@protoc_insertion_point(destructor:func.EventRequest)
  SharedDtor();
}

void EventRequest::SharedDtor() {
  if (this != internal_default_instance()) delete payload_;
}

void EventRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EventRequest& EventRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EventRequest_func_2eproto.base);
  return *internal_default_instance();
}


void EventRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:func.EventRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && payload_ != nullptr) {
    delete payload_;
  }
  payload_ = nullptr;
  event_type_ = 0;
  _internal_metadata_.Clear();
}

const char* EventRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 event_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          event_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any payload = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_payload(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EventRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:func.EventRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 event_type = 1;
  if (this->event_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_event_type(), target);
  }

  // .google.protobuf.Any payload = 2;
  if (this->has_payload()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::payload(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:func.EventRequest)
  return target;
}

size_t EventRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:func.EventRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Any payload = 2;
  if (this->has_payload()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *payload_);
  }

  // int32 event_type = 1;
  if (this->event_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_event_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:func.EventRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EventRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EventRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:func.EventRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:func.EventRequest)
    MergeFrom(*source);
  }
}

void EventRequest::MergeFrom(const EventRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:func.EventRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_payload()) {
    _internal_mutable_payload()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_payload());
  }
  if (from.event_type() != 0) {
    _internal_set_event_type(from._internal_event_type());
  }
}

void EventRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:func.EventRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventRequest::CopyFrom(const EventRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:func.EventRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventRequest::IsInitialized() const {
  return true;
}

void EventRequest::InternalSwap(EventRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(payload_, other->payload_);
  swap(event_type_, other->event_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EventReply::InitAsDefaultInstance() {
  ::func::_EventReply_default_instance_._instance.get_mutable()->payload_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
}
class EventReply::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& payload(const EventReply* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
EventReply::_Internal::payload(const EventReply* msg) {
  return *msg->payload_;
}
void EventReply::clear_payload() {
  if (GetArenaNoVirtual() == nullptr && payload_ != nullptr) {
    delete payload_;
  }
  payload_ = nullptr;
}
EventReply::EventReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:func.EventReply)
}
EventReply::EventReply(const EventReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_payload()) {
    payload_ = new PROTOBUF_NAMESPACE_ID::Any(*from.payload_);
  } else {
    payload_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:func.EventReply)
}

void EventReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EventReply_func_2eproto.base);
  payload_ = nullptr;
}

EventReply::~EventReply() {
  // @@protoc_insertion_point(destructor:func.EventReply)
  SharedDtor();
}

void EventReply::SharedDtor() {
  if (this != internal_default_instance()) delete payload_;
}

void EventReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EventReply& EventReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EventReply_func_2eproto.base);
  return *internal_default_instance();
}


void EventReply::Clear() {
// @@protoc_insertion_point(message_clear_start:func.EventReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && payload_ != nullptr) {
    delete payload_;
  }
  payload_ = nullptr;
  _internal_metadata_.Clear();
}

const char* EventReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Any payload = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_payload(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EventReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:func.EventReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Any payload = 1;
  if (this->has_payload()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::payload(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:func.EventReply)
  return target;
}

size_t EventReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:func.EventReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Any payload = 1;
  if (this->has_payload()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *payload_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:func.EventReply)
  GOOGLE_DCHECK_NE(&from, this);
  const EventReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EventReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:func.EventReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:func.EventReply)
    MergeFrom(*source);
  }
}

void EventReply::MergeFrom(const EventReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:func.EventReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_payload()) {
    _internal_mutable_payload()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_payload());
  }
}

void EventReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:func.EventReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventReply::CopyFrom(const EventReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:func.EventReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventReply::IsInitialized() const {
  return true;
}

void EventReply::InternalSwap(EventReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(payload_, other->payload_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventReply::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace func
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::func::HookRequest* Arena::CreateMaybeMessage< ::func::HookRequest >(Arena* arena) {
  return Arena::CreateInternal< ::func::HookRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::func::HookReply* Arena::CreateMaybeMessage< ::func::HookReply >(Arena* arena) {
  return Arena::CreateInternal< ::func::HookReply >(arena);
}
template<> PROTOBUF_NOINLINE ::func::UnhookRequest* Arena::CreateMaybeMessage< ::func::UnhookRequest >(Arena* arena) {
  return Arena::CreateInternal< ::func::UnhookRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::func::UnhookReply* Arena::CreateMaybeMessage< ::func::UnhookReply >(Arena* arena) {
  return Arena::CreateInternal< ::func::UnhookReply >(arena);
}
template<> PROTOBUF_NOINLINE ::func::EventRequest* Arena::CreateMaybeMessage< ::func::EventRequest >(Arena* arena) {
  return Arena::CreateInternal< ::func::EventRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::func::EventReply* Arena::CreateMaybeMessage< ::func::EventReply >(Arena* arena) {
  return Arena::CreateInternal< ::func::EventReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
