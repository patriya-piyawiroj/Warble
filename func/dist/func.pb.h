// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: func.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_func_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_func_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_func_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_func_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_func_2eproto;
namespace func {
class EventReply;
class EventReplyDefaultTypeInternal;
extern EventReplyDefaultTypeInternal _EventReply_default_instance_;
class EventRequest;
class EventRequestDefaultTypeInternal;
extern EventRequestDefaultTypeInternal _EventRequest_default_instance_;
class HookReply;
class HookReplyDefaultTypeInternal;
extern HookReplyDefaultTypeInternal _HookReply_default_instance_;
class HookRequest;
class HookRequestDefaultTypeInternal;
extern HookRequestDefaultTypeInternal _HookRequest_default_instance_;
class UnhookReply;
class UnhookReplyDefaultTypeInternal;
extern UnhookReplyDefaultTypeInternal _UnhookReply_default_instance_;
class UnhookRequest;
class UnhookRequestDefaultTypeInternal;
extern UnhookRequestDefaultTypeInternal _UnhookRequest_default_instance_;
}  // namespace func
PROTOBUF_NAMESPACE_OPEN
template<> ::func::EventReply* Arena::CreateMaybeMessage<::func::EventReply>(Arena*);
template<> ::func::EventRequest* Arena::CreateMaybeMessage<::func::EventRequest>(Arena*);
template<> ::func::HookReply* Arena::CreateMaybeMessage<::func::HookReply>(Arena*);
template<> ::func::HookRequest* Arena::CreateMaybeMessage<::func::HookRequest>(Arena*);
template<> ::func::UnhookReply* Arena::CreateMaybeMessage<::func::UnhookReply>(Arena*);
template<> ::func::UnhookRequest* Arena::CreateMaybeMessage<::func::UnhookRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace func {

// ===================================================================

class HookRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:func.HookRequest) */ {
 public:
  HookRequest();
  virtual ~HookRequest();

  HookRequest(const HookRequest& from);
  HookRequest(HookRequest&& from) noexcept
    : HookRequest() {
    *this = ::std::move(from);
  }

  inline HookRequest& operator=(const HookRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HookRequest& operator=(HookRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HookRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HookRequest* internal_default_instance() {
    return reinterpret_cast<const HookRequest*>(
               &_HookRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HookRequest& a, HookRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HookRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HookRequest* New() const final {
    return CreateMaybeMessage<HookRequest>(nullptr);
  }

  HookRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HookRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HookRequest& from);
  void MergeFrom(const HookRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HookRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "func.HookRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_func_2eproto);
    return ::descriptor_table_func_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventFunctionFieldNumber = 2,
    kEventTypeFieldNumber = 1,
  };
  // string event_function = 2;
  void clear_event_function();
  const std::string& event_function() const;
  void set_event_function(const std::string& value);
  void set_event_function(std::string&& value);
  void set_event_function(const char* value);
  void set_event_function(const char* value, size_t size);
  std::string* mutable_event_function();
  std::string* release_event_function();
  void set_allocated_event_function(std::string* event_function);
  private:
  const std::string& _internal_event_function() const;
  void _internal_set_event_function(const std::string& value);
  std::string* _internal_mutable_event_function();
  public:

  // int32 event_type = 1;
  void clear_event_type();
  ::PROTOBUF_NAMESPACE_ID::int32 event_type() const;
  void set_event_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_event_type() const;
  void _internal_set_event_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:func.HookRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_function_;
  ::PROTOBUF_NAMESPACE_ID::int32 event_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_func_2eproto;
};
// -------------------------------------------------------------------

class HookReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:func.HookReply) */ {
 public:
  HookReply();
  virtual ~HookReply();

  HookReply(const HookReply& from);
  HookReply(HookReply&& from) noexcept
    : HookReply() {
    *this = ::std::move(from);
  }

  inline HookReply& operator=(const HookReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline HookReply& operator=(HookReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HookReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HookReply* internal_default_instance() {
    return reinterpret_cast<const HookReply*>(
               &_HookReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HookReply& a, HookReply& b) {
    a.Swap(&b);
  }
  inline void Swap(HookReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HookReply* New() const final {
    return CreateMaybeMessage<HookReply>(nullptr);
  }

  HookReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HookReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HookReply& from);
  void MergeFrom(const HookReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HookReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "func.HookReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_func_2eproto);
    return ::descriptor_table_func_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:func.HookReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_func_2eproto;
};
// -------------------------------------------------------------------

class UnhookRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:func.UnhookRequest) */ {
 public:
  UnhookRequest();
  virtual ~UnhookRequest();

  UnhookRequest(const UnhookRequest& from);
  UnhookRequest(UnhookRequest&& from) noexcept
    : UnhookRequest() {
    *this = ::std::move(from);
  }

  inline UnhookRequest& operator=(const UnhookRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnhookRequest& operator=(UnhookRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnhookRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnhookRequest* internal_default_instance() {
    return reinterpret_cast<const UnhookRequest*>(
               &_UnhookRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UnhookRequest& a, UnhookRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UnhookRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnhookRequest* New() const final {
    return CreateMaybeMessage<UnhookRequest>(nullptr);
  }

  UnhookRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnhookRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnhookRequest& from);
  void MergeFrom(const UnhookRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnhookRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "func.UnhookRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_func_2eproto);
    return ::descriptor_table_func_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventTypeFieldNumber = 1,
  };
  // int32 event_type = 1;
  void clear_event_type();
  ::PROTOBUF_NAMESPACE_ID::int32 event_type() const;
  void set_event_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_event_type() const;
  void _internal_set_event_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:func.UnhookRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 event_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_func_2eproto;
};
// -------------------------------------------------------------------

class UnhookReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:func.UnhookReply) */ {
 public:
  UnhookReply();
  virtual ~UnhookReply();

  UnhookReply(const UnhookReply& from);
  UnhookReply(UnhookReply&& from) noexcept
    : UnhookReply() {
    *this = ::std::move(from);
  }

  inline UnhookReply& operator=(const UnhookReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnhookReply& operator=(UnhookReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnhookReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnhookReply* internal_default_instance() {
    return reinterpret_cast<const UnhookReply*>(
               &_UnhookReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UnhookReply& a, UnhookReply& b) {
    a.Swap(&b);
  }
  inline void Swap(UnhookReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnhookReply* New() const final {
    return CreateMaybeMessage<UnhookReply>(nullptr);
  }

  UnhookReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnhookReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnhookReply& from);
  void MergeFrom(const UnhookReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnhookReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "func.UnhookReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_func_2eproto);
    return ::descriptor_table_func_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:func.UnhookReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_func_2eproto;
};
// -------------------------------------------------------------------

class EventRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:func.EventRequest) */ {
 public:
  EventRequest();
  virtual ~EventRequest();

  EventRequest(const EventRequest& from);
  EventRequest(EventRequest&& from) noexcept
    : EventRequest() {
    *this = ::std::move(from);
  }

  inline EventRequest& operator=(const EventRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventRequest& operator=(EventRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EventRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventRequest* internal_default_instance() {
    return reinterpret_cast<const EventRequest*>(
               &_EventRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(EventRequest& a, EventRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EventRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EventRequest* New() const final {
    return CreateMaybeMessage<EventRequest>(nullptr);
  }

  EventRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EventRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EventRequest& from);
  void MergeFrom(const EventRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "func.EventRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_func_2eproto);
    return ::descriptor_table_func_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 2,
    kEventTypeFieldNumber = 1,
  };
  // .google.protobuf.Any payload = 2;
  bool has_payload() const;
  private:
  bool _internal_has_payload() const;
  public:
  void clear_payload();
  const PROTOBUF_NAMESPACE_ID::Any& payload() const;
  PROTOBUF_NAMESPACE_ID::Any* release_payload();
  PROTOBUF_NAMESPACE_ID::Any* mutable_payload();
  void set_allocated_payload(PROTOBUF_NAMESPACE_ID::Any* payload);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_payload() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_payload();
  public:

  // int32 event_type = 1;
  void clear_event_type();
  ::PROTOBUF_NAMESPACE_ID::int32 event_type() const;
  void set_event_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_event_type() const;
  void _internal_set_event_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:func.EventRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  PROTOBUF_NAMESPACE_ID::Any* payload_;
  ::PROTOBUF_NAMESPACE_ID::int32 event_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_func_2eproto;
};
// -------------------------------------------------------------------

class EventReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:func.EventReply) */ {
 public:
  EventReply();
  virtual ~EventReply();

  EventReply(const EventReply& from);
  EventReply(EventReply&& from) noexcept
    : EventReply() {
    *this = ::std::move(from);
  }

  inline EventReply& operator=(const EventReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventReply& operator=(EventReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EventReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventReply* internal_default_instance() {
    return reinterpret_cast<const EventReply*>(
               &_EventReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(EventReply& a, EventReply& b) {
    a.Swap(&b);
  }
  inline void Swap(EventReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EventReply* New() const final {
    return CreateMaybeMessage<EventReply>(nullptr);
  }

  EventReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EventReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EventReply& from);
  void MergeFrom(const EventReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "func.EventReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_func_2eproto);
    return ::descriptor_table_func_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 1,
  };
  // .google.protobuf.Any payload = 1;
  bool has_payload() const;
  private:
  bool _internal_has_payload() const;
  public:
  void clear_payload();
  const PROTOBUF_NAMESPACE_ID::Any& payload() const;
  PROTOBUF_NAMESPACE_ID::Any* release_payload();
  PROTOBUF_NAMESPACE_ID::Any* mutable_payload();
  void set_allocated_payload(PROTOBUF_NAMESPACE_ID::Any* payload);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_payload() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_payload();
  public:

  // @@protoc_insertion_point(class_scope:func.EventReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  PROTOBUF_NAMESPACE_ID::Any* payload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_func_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HookRequest

// int32 event_type = 1;
inline void HookRequest::clear_event_type() {
  event_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HookRequest::_internal_event_type() const {
  return event_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HookRequest::event_type() const {
  // @@protoc_insertion_point(field_get:func.HookRequest.event_type)
  return _internal_event_type();
}
inline void HookRequest::_internal_set_event_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  event_type_ = value;
}
inline void HookRequest::set_event_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_event_type(value);
  // @@protoc_insertion_point(field_set:func.HookRequest.event_type)
}

// string event_function = 2;
inline void HookRequest::clear_event_function() {
  event_function_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& HookRequest::event_function() const {
  // @@protoc_insertion_point(field_get:func.HookRequest.event_function)
  return _internal_event_function();
}
inline void HookRequest::set_event_function(const std::string& value) {
  _internal_set_event_function(value);
  // @@protoc_insertion_point(field_set:func.HookRequest.event_function)
}
inline std::string* HookRequest::mutable_event_function() {
  // @@protoc_insertion_point(field_mutable:func.HookRequest.event_function)
  return _internal_mutable_event_function();
}
inline const std::string& HookRequest::_internal_event_function() const {
  return event_function_.GetNoArena();
}
inline void HookRequest::_internal_set_event_function(const std::string& value) {
  
  event_function_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void HookRequest::set_event_function(std::string&& value) {
  
  event_function_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:func.HookRequest.event_function)
}
inline void HookRequest::set_event_function(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  event_function_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:func.HookRequest.event_function)
}
inline void HookRequest::set_event_function(const char* value, size_t size) {
  
  event_function_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:func.HookRequest.event_function)
}
inline std::string* HookRequest::_internal_mutable_event_function() {
  
  return event_function_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HookRequest::release_event_function() {
  // @@protoc_insertion_point(field_release:func.HookRequest.event_function)
  
  return event_function_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HookRequest::set_allocated_event_function(std::string* event_function) {
  if (event_function != nullptr) {
    
  } else {
    
  }
  event_function_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), event_function);
  // @@protoc_insertion_point(field_set_allocated:func.HookRequest.event_function)
}

// -------------------------------------------------------------------

// HookReply

// -------------------------------------------------------------------

// UnhookRequest

// int32 event_type = 1;
inline void UnhookRequest::clear_event_type() {
  event_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UnhookRequest::_internal_event_type() const {
  return event_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UnhookRequest::event_type() const {
  // @@protoc_insertion_point(field_get:func.UnhookRequest.event_type)
  return _internal_event_type();
}
inline void UnhookRequest::_internal_set_event_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  event_type_ = value;
}
inline void UnhookRequest::set_event_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_event_type(value);
  // @@protoc_insertion_point(field_set:func.UnhookRequest.event_type)
}

// -------------------------------------------------------------------

// UnhookReply

// -------------------------------------------------------------------

// EventRequest

// int32 event_type = 1;
inline void EventRequest::clear_event_type() {
  event_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EventRequest::_internal_event_type() const {
  return event_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EventRequest::event_type() const {
  // @@protoc_insertion_point(field_get:func.EventRequest.event_type)
  return _internal_event_type();
}
inline void EventRequest::_internal_set_event_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  event_type_ = value;
}
inline void EventRequest::set_event_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_event_type(value);
  // @@protoc_insertion_point(field_set:func.EventRequest.event_type)
}

// .google.protobuf.Any payload = 2;
inline bool EventRequest::_internal_has_payload() const {
  return this != internal_default_instance() && payload_ != nullptr;
}
inline bool EventRequest::has_payload() const {
  return _internal_has_payload();
}
inline const PROTOBUF_NAMESPACE_ID::Any& EventRequest::_internal_payload() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = payload_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& EventRequest::payload() const {
  // @@protoc_insertion_point(field_get:func.EventRequest.payload)
  return _internal_payload();
}
inline PROTOBUF_NAMESPACE_ID::Any* EventRequest::release_payload() {
  // @@protoc_insertion_point(field_release:func.EventRequest.payload)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = payload_;
  payload_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* EventRequest::_internal_mutable_payload() {
  
  if (payload_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArenaNoVirtual());
    payload_ = p;
  }
  return payload_;
}
inline PROTOBUF_NAMESPACE_ID::Any* EventRequest::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:func.EventRequest.payload)
  return _internal_mutable_payload();
}
inline void EventRequest::set_allocated_payload(PROTOBUF_NAMESPACE_ID::Any* payload) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(payload_);
  }
  if (payload) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      payload = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, payload, submessage_arena);
    }
    
  } else {
    
  }
  payload_ = payload;
  // @@protoc_insertion_point(field_set_allocated:func.EventRequest.payload)
}

// -------------------------------------------------------------------

// EventReply

// .google.protobuf.Any payload = 1;
inline bool EventReply::_internal_has_payload() const {
  return this != internal_default_instance() && payload_ != nullptr;
}
inline bool EventReply::has_payload() const {
  return _internal_has_payload();
}
inline const PROTOBUF_NAMESPACE_ID::Any& EventReply::_internal_payload() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = payload_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& EventReply::payload() const {
  // @@protoc_insertion_point(field_get:func.EventReply.payload)
  return _internal_payload();
}
inline PROTOBUF_NAMESPACE_ID::Any* EventReply::release_payload() {
  // @@protoc_insertion_point(field_release:func.EventReply.payload)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = payload_;
  payload_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* EventReply::_internal_mutable_payload() {
  
  if (payload_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArenaNoVirtual());
    payload_ = p;
  }
  return payload_;
}
inline PROTOBUF_NAMESPACE_ID::Any* EventReply::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:func.EventReply.payload)
  return _internal_mutable_payload();
}
inline void EventReply::set_allocated_payload(PROTOBUF_NAMESPACE_ID::Any* payload) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(payload_);
  }
  if (payload) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      payload = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, payload, submessage_arena);
    }
    
  } else {
    
  }
  payload_ = payload;
  // @@protoc_insertion_point(field_set_allocated:func.EventReply.payload)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace func

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_func_2eproto
