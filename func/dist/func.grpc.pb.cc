// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: func.proto

#include "func.pb.h"
#include "func.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace func {

static const char* FuncService_method_names[] = {
  "/func.FuncService/hook",
  "/func.FuncService/unhook",
  "/func.FuncService/event",
};

std::unique_ptr< FuncService::Stub> FuncService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< FuncService::Stub> stub(new FuncService::Stub(channel));
  return stub;
}

FuncService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_hook_(FuncService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_unhook_(FuncService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_event_(FuncService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status FuncService::Stub::hook(::grpc::ClientContext* context, const ::func::HookRequest& request, ::func::HookReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_hook_, context, request, response);
}

void FuncService::Stub::experimental_async::hook(::grpc::ClientContext* context, const ::func::HookRequest* request, ::func::HookReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_hook_, context, request, response, std::move(f));
}

void FuncService::Stub::experimental_async::hook(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::func::HookReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_hook_, context, request, response, std::move(f));
}

void FuncService::Stub::experimental_async::hook(::grpc::ClientContext* context, const ::func::HookRequest* request, ::func::HookReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_hook_, context, request, response, reactor);
}

void FuncService::Stub::experimental_async::hook(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::func::HookReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_hook_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::func::HookReply>* FuncService::Stub::AsynchookRaw(::grpc::ClientContext* context, const ::func::HookRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::func::HookReply>::Create(channel_.get(), cq, rpcmethod_hook_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::func::HookReply>* FuncService::Stub::PrepareAsynchookRaw(::grpc::ClientContext* context, const ::func::HookRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::func::HookReply>::Create(channel_.get(), cq, rpcmethod_hook_, context, request, false);
}

::grpc::Status FuncService::Stub::unhook(::grpc::ClientContext* context, const ::func::UnhookRequest& request, ::func::UnhookReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_unhook_, context, request, response);
}

void FuncService::Stub::experimental_async::unhook(::grpc::ClientContext* context, const ::func::UnhookRequest* request, ::func::UnhookReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_unhook_, context, request, response, std::move(f));
}

void FuncService::Stub::experimental_async::unhook(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::func::UnhookReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_unhook_, context, request, response, std::move(f));
}

void FuncService::Stub::experimental_async::unhook(::grpc::ClientContext* context, const ::func::UnhookRequest* request, ::func::UnhookReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_unhook_, context, request, response, reactor);
}

void FuncService::Stub::experimental_async::unhook(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::func::UnhookReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_unhook_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::func::UnhookReply>* FuncService::Stub::AsyncunhookRaw(::grpc::ClientContext* context, const ::func::UnhookRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::func::UnhookReply>::Create(channel_.get(), cq, rpcmethod_unhook_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::func::UnhookReply>* FuncService::Stub::PrepareAsyncunhookRaw(::grpc::ClientContext* context, const ::func::UnhookRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::func::UnhookReply>::Create(channel_.get(), cq, rpcmethod_unhook_, context, request, false);
}

::grpc::Status FuncService::Stub::event(::grpc::ClientContext* context, const ::func::EventRequest& request, ::func::EventReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_event_, context, request, response);
}

void FuncService::Stub::experimental_async::event(::grpc::ClientContext* context, const ::func::EventRequest* request, ::func::EventReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_event_, context, request, response, std::move(f));
}

void FuncService::Stub::experimental_async::event(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::func::EventReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_event_, context, request, response, std::move(f));
}

void FuncService::Stub::experimental_async::event(::grpc::ClientContext* context, const ::func::EventRequest* request, ::func::EventReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_event_, context, request, response, reactor);
}

void FuncService::Stub::experimental_async::event(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::func::EventReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_event_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::func::EventReply>* FuncService::Stub::AsynceventRaw(::grpc::ClientContext* context, const ::func::EventRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::func::EventReply>::Create(channel_.get(), cq, rpcmethod_event_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::func::EventReply>* FuncService::Stub::PrepareAsynceventRaw(::grpc::ClientContext* context, const ::func::EventRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::func::EventReply>::Create(channel_.get(), cq, rpcmethod_event_, context, request, false);
}

FuncService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FuncService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FuncService::Service, ::func::HookRequest, ::func::HookReply>(
          std::mem_fn(&FuncService::Service::hook), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FuncService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FuncService::Service, ::func::UnhookRequest, ::func::UnhookReply>(
          std::mem_fn(&FuncService::Service::unhook), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FuncService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FuncService::Service, ::func::EventRequest, ::func::EventReply>(
          std::mem_fn(&FuncService::Service::event), this)));
}

FuncService::Service::~Service() {
}

::grpc::Status FuncService::Service::hook(::grpc::ServerContext* context, const ::func::HookRequest* request, ::func::HookReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FuncService::Service::unhook(::grpc::ServerContext* context, const ::func::UnhookRequest* request, ::func::UnhookReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FuncService::Service::event(::grpc::ServerContext* context, const ::func::EventRequest* request, ::func::EventReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace func

