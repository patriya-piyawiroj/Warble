// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: func.proto
#ifndef GRPC_func_2eproto__INCLUDED
#define GRPC_func_2eproto__INCLUDED

#include "func.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace func {

class FuncService final {
 public:
  static constexpr char const* service_full_name() {
    return "func.FuncService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status hook(::grpc::ClientContext* context, const ::func::HookRequest& request, ::func::HookReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::func::HookReply>> Asynchook(::grpc::ClientContext* context, const ::func::HookRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::func::HookReply>>(AsynchookRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::func::HookReply>> PrepareAsynchook(::grpc::ClientContext* context, const ::func::HookRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::func::HookReply>>(PrepareAsynchookRaw(context, request, cq));
    }
    virtual ::grpc::Status unhook(::grpc::ClientContext* context, const ::func::UnhookRequest& request, ::func::UnhookReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::func::UnhookReply>> Asyncunhook(::grpc::ClientContext* context, const ::func::UnhookRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::func::UnhookReply>>(AsyncunhookRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::func::UnhookReply>> PrepareAsyncunhook(::grpc::ClientContext* context, const ::func::UnhookRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::func::UnhookReply>>(PrepareAsyncunhookRaw(context, request, cq));
    }
    virtual ::grpc::Status event(::grpc::ClientContext* context, const ::func::EventRequest& request, ::func::EventReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::func::EventReply>> Asyncevent(::grpc::ClientContext* context, const ::func::EventRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::func::EventReply>>(AsynceventRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::func::EventReply>> PrepareAsyncevent(::grpc::ClientContext* context, const ::func::EventRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::func::EventReply>>(PrepareAsynceventRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void hook(::grpc::ClientContext* context, const ::func::HookRequest* request, ::func::HookReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void hook(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::func::HookReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void hook(::grpc::ClientContext* context, const ::func::HookRequest* request, ::func::HookReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void hook(::grpc::ClientContext* context, const ::func::HookRequest* request, ::func::HookReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void hook(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::func::HookReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void hook(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::func::HookReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void unhook(::grpc::ClientContext* context, const ::func::UnhookRequest* request, ::func::UnhookReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void unhook(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::func::UnhookReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void unhook(::grpc::ClientContext* context, const ::func::UnhookRequest* request, ::func::UnhookReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void unhook(::grpc::ClientContext* context, const ::func::UnhookRequest* request, ::func::UnhookReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void unhook(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::func::UnhookReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void unhook(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::func::UnhookReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void event(::grpc::ClientContext* context, const ::func::EventRequest* request, ::func::EventReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void event(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::func::EventReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void event(::grpc::ClientContext* context, const ::func::EventRequest* request, ::func::EventReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void event(::grpc::ClientContext* context, const ::func::EventRequest* request, ::func::EventReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void event(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::func::EventReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void event(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::func::EventReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::func::HookReply>* AsynchookRaw(::grpc::ClientContext* context, const ::func::HookRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::func::HookReply>* PrepareAsynchookRaw(::grpc::ClientContext* context, const ::func::HookRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::func::UnhookReply>* AsyncunhookRaw(::grpc::ClientContext* context, const ::func::UnhookRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::func::UnhookReply>* PrepareAsyncunhookRaw(::grpc::ClientContext* context, const ::func::UnhookRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::func::EventReply>* AsynceventRaw(::grpc::ClientContext* context, const ::func::EventRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::func::EventReply>* PrepareAsynceventRaw(::grpc::ClientContext* context, const ::func::EventRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status hook(::grpc::ClientContext* context, const ::func::HookRequest& request, ::func::HookReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::func::HookReply>> Asynchook(::grpc::ClientContext* context, const ::func::HookRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::func::HookReply>>(AsynchookRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::func::HookReply>> PrepareAsynchook(::grpc::ClientContext* context, const ::func::HookRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::func::HookReply>>(PrepareAsynchookRaw(context, request, cq));
    }
    ::grpc::Status unhook(::grpc::ClientContext* context, const ::func::UnhookRequest& request, ::func::UnhookReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::func::UnhookReply>> Asyncunhook(::grpc::ClientContext* context, const ::func::UnhookRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::func::UnhookReply>>(AsyncunhookRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::func::UnhookReply>> PrepareAsyncunhook(::grpc::ClientContext* context, const ::func::UnhookRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::func::UnhookReply>>(PrepareAsyncunhookRaw(context, request, cq));
    }
    ::grpc::Status event(::grpc::ClientContext* context, const ::func::EventRequest& request, ::func::EventReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::func::EventReply>> Asyncevent(::grpc::ClientContext* context, const ::func::EventRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::func::EventReply>>(AsynceventRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::func::EventReply>> PrepareAsyncevent(::grpc::ClientContext* context, const ::func::EventRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::func::EventReply>>(PrepareAsynceventRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void hook(::grpc::ClientContext* context, const ::func::HookRequest* request, ::func::HookReply* response, std::function<void(::grpc::Status)>) override;
      void hook(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::func::HookReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void hook(::grpc::ClientContext* context, const ::func::HookRequest* request, ::func::HookReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void hook(::grpc::ClientContext* context, const ::func::HookRequest* request, ::func::HookReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void hook(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::func::HookReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void hook(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::func::HookReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void unhook(::grpc::ClientContext* context, const ::func::UnhookRequest* request, ::func::UnhookReply* response, std::function<void(::grpc::Status)>) override;
      void unhook(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::func::UnhookReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void unhook(::grpc::ClientContext* context, const ::func::UnhookRequest* request, ::func::UnhookReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void unhook(::grpc::ClientContext* context, const ::func::UnhookRequest* request, ::func::UnhookReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void unhook(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::func::UnhookReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void unhook(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::func::UnhookReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void event(::grpc::ClientContext* context, const ::func::EventRequest* request, ::func::EventReply* response, std::function<void(::grpc::Status)>) override;
      void event(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::func::EventReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void event(::grpc::ClientContext* context, const ::func::EventRequest* request, ::func::EventReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void event(::grpc::ClientContext* context, const ::func::EventRequest* request, ::func::EventReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void event(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::func::EventReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void event(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::func::EventReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::func::HookReply>* AsynchookRaw(::grpc::ClientContext* context, const ::func::HookRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::func::HookReply>* PrepareAsynchookRaw(::grpc::ClientContext* context, const ::func::HookRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::func::UnhookReply>* AsyncunhookRaw(::grpc::ClientContext* context, const ::func::UnhookRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::func::UnhookReply>* PrepareAsyncunhookRaw(::grpc::ClientContext* context, const ::func::UnhookRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::func::EventReply>* AsynceventRaw(::grpc::ClientContext* context, const ::func::EventRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::func::EventReply>* PrepareAsynceventRaw(::grpc::ClientContext* context, const ::func::EventRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_hook_;
    const ::grpc::internal::RpcMethod rpcmethod_unhook_;
    const ::grpc::internal::RpcMethod rpcmethod_event_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status hook(::grpc::ServerContext* context, const ::func::HookRequest* request, ::func::HookReply* response);
    virtual ::grpc::Status unhook(::grpc::ServerContext* context, const ::func::UnhookRequest* request, ::func::UnhookReply* response);
    virtual ::grpc::Status event(::grpc::ServerContext* context, const ::func::EventRequest* request, ::func::EventReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_hook : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_hook() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_hook() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status hook(::grpc::ServerContext* /*context*/, const ::func::HookRequest* /*request*/, ::func::HookReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requesthook(::grpc::ServerContext* context, ::func::HookRequest* request, ::grpc::ServerAsyncResponseWriter< ::func::HookReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_unhook : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_unhook() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_unhook() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unhook(::grpc::ServerContext* /*context*/, const ::func::UnhookRequest* /*request*/, ::func::UnhookReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestunhook(::grpc::ServerContext* context, ::func::UnhookRequest* request, ::grpc::ServerAsyncResponseWriter< ::func::UnhookReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_event : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_event() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_event() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status event(::grpc::ServerContext* /*context*/, const ::func::EventRequest* /*request*/, ::func::EventReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestevent(::grpc::ServerContext* context, ::func::EventRequest* request, ::grpc::ServerAsyncResponseWriter< ::func::EventReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_hook<WithAsyncMethod_unhook<WithAsyncMethod_event<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_hook : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_hook() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::func::HookRequest, ::func::HookReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::func::HookRequest* request, ::func::HookReply* response) { return this->hook(context, request, response); }));}
    void SetMessageAllocatorFor_hook(
        ::grpc::experimental::MessageAllocator< ::func::HookRequest, ::func::HookReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::func::HookRequest, ::func::HookReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_hook() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status hook(::grpc::ServerContext* /*context*/, const ::func::HookRequest* /*request*/, ::func::HookReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* hook(
      ::grpc::CallbackServerContext* /*context*/, const ::func::HookRequest* /*request*/, ::func::HookReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* hook(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::func::HookRequest* /*request*/, ::func::HookReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_unhook : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_unhook() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::func::UnhookRequest, ::func::UnhookReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::func::UnhookRequest* request, ::func::UnhookReply* response) { return this->unhook(context, request, response); }));}
    void SetMessageAllocatorFor_unhook(
        ::grpc::experimental::MessageAllocator< ::func::UnhookRequest, ::func::UnhookReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::func::UnhookRequest, ::func::UnhookReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_unhook() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unhook(::grpc::ServerContext* /*context*/, const ::func::UnhookRequest* /*request*/, ::func::UnhookReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* unhook(
      ::grpc::CallbackServerContext* /*context*/, const ::func::UnhookRequest* /*request*/, ::func::UnhookReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* unhook(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::func::UnhookRequest* /*request*/, ::func::UnhookReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_event : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_event() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::func::EventRequest, ::func::EventReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::func::EventRequest* request, ::func::EventReply* response) { return this->event(context, request, response); }));}
    void SetMessageAllocatorFor_event(
        ::grpc::experimental::MessageAllocator< ::func::EventRequest, ::func::EventReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::func::EventRequest, ::func::EventReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_event() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status event(::grpc::ServerContext* /*context*/, const ::func::EventRequest* /*request*/, ::func::EventReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* event(
      ::grpc::CallbackServerContext* /*context*/, const ::func::EventRequest* /*request*/, ::func::EventReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* event(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::func::EventRequest* /*request*/, ::func::EventReply* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_hook<ExperimentalWithCallbackMethod_unhook<ExperimentalWithCallbackMethod_event<Service > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_hook<ExperimentalWithCallbackMethod_unhook<ExperimentalWithCallbackMethod_event<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_hook : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_hook() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_hook() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status hook(::grpc::ServerContext* /*context*/, const ::func::HookRequest* /*request*/, ::func::HookReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_unhook : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_unhook() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_unhook() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unhook(::grpc::ServerContext* /*context*/, const ::func::UnhookRequest* /*request*/, ::func::UnhookReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_event : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_event() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_event() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status event(::grpc::ServerContext* /*context*/, const ::func::EventRequest* /*request*/, ::func::EventReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_hook : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_hook() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_hook() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status hook(::grpc::ServerContext* /*context*/, const ::func::HookRequest* /*request*/, ::func::HookReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requesthook(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_unhook : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_unhook() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_unhook() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unhook(::grpc::ServerContext* /*context*/, const ::func::UnhookRequest* /*request*/, ::func::UnhookReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestunhook(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_event : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_event() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_event() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status event(::grpc::ServerContext* /*context*/, const ::func::EventRequest* /*request*/, ::func::EventReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestevent(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_hook : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_hook() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->hook(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_hook() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status hook(::grpc::ServerContext* /*context*/, const ::func::HookRequest* /*request*/, ::func::HookReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* hook(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* hook(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_unhook : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_unhook() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->unhook(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_unhook() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unhook(::grpc::ServerContext* /*context*/, const ::func::UnhookRequest* /*request*/, ::func::UnhookReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* unhook(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* unhook(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_event : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_event() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->event(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_event() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status event(::grpc::ServerContext* /*context*/, const ::func::EventRequest* /*request*/, ::func::EventReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* event(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* event(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_hook : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_hook() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::func::HookRequest, ::func::HookReply>(std::bind(&WithStreamedUnaryMethod_hook<BaseClass>::Streamedhook, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_hook() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status hook(::grpc::ServerContext* /*context*/, const ::func::HookRequest* /*request*/, ::func::HookReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedhook(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::func::HookRequest,::func::HookReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_unhook : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_unhook() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::func::UnhookRequest, ::func::UnhookReply>(std::bind(&WithStreamedUnaryMethod_unhook<BaseClass>::Streamedunhook, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_unhook() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status unhook(::grpc::ServerContext* /*context*/, const ::func::UnhookRequest* /*request*/, ::func::UnhookReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedunhook(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::func::UnhookRequest,::func::UnhookReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_event : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_event() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::func::EventRequest, ::func::EventReply>(std::bind(&WithStreamedUnaryMethod_event<BaseClass>::Streamedevent, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_event() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status event(::grpc::ServerContext* /*context*/, const ::func::EventRequest* /*request*/, ::func::EventReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedevent(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::func::EventRequest,::func::EventReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_hook<WithStreamedUnaryMethod_unhook<WithStreamedUnaryMethod_event<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_hook<WithStreamedUnaryMethod_unhook<WithStreamedUnaryMethod_event<Service > > > StreamedService;
};

}  // namespace func


#endif  // GRPC_func_2eproto__INCLUDED
