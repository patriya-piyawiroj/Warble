// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: warble.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_warble_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_warble_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_warble_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_warble_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_warble_2eproto;
namespace warble {
class FollowReply;
class FollowReplyDefaultTypeInternal;
extern FollowReplyDefaultTypeInternal _FollowReply_default_instance_;
class FollowRequest;
class FollowRequestDefaultTypeInternal;
extern FollowRequestDefaultTypeInternal _FollowRequest_default_instance_;
class ProfileReply;
class ProfileReplyDefaultTypeInternal;
extern ProfileReplyDefaultTypeInternal _ProfileReply_default_instance_;
class ProfileRequest;
class ProfileRequestDefaultTypeInternal;
extern ProfileRequestDefaultTypeInternal _ProfileRequest_default_instance_;
class ReadReply;
class ReadReplyDefaultTypeInternal;
extern ReadReplyDefaultTypeInternal _ReadReply_default_instance_;
class ReadRequest;
class ReadRequestDefaultTypeInternal;
extern ReadRequestDefaultTypeInternal _ReadRequest_default_instance_;
class RegisteruserReply;
class RegisteruserReplyDefaultTypeInternal;
extern RegisteruserReplyDefaultTypeInternal _RegisteruserReply_default_instance_;
class RegisteruserRequest;
class RegisteruserRequestDefaultTypeInternal;
extern RegisteruserRequestDefaultTypeInternal _RegisteruserRequest_default_instance_;
class Timestamp;
class TimestampDefaultTypeInternal;
extern TimestampDefaultTypeInternal _Timestamp_default_instance_;
class Warble;
class WarbleDefaultTypeInternal;
extern WarbleDefaultTypeInternal _Warble_default_instance_;
class WarbleReply;
class WarbleReplyDefaultTypeInternal;
extern WarbleReplyDefaultTypeInternal _WarbleReply_default_instance_;
class WarbleRequest;
class WarbleRequestDefaultTypeInternal;
extern WarbleRequestDefaultTypeInternal _WarbleRequest_default_instance_;
}  // namespace warble
PROTOBUF_NAMESPACE_OPEN
template<> ::warble::FollowReply* Arena::CreateMaybeMessage<::warble::FollowReply>(Arena*);
template<> ::warble::FollowRequest* Arena::CreateMaybeMessage<::warble::FollowRequest>(Arena*);
template<> ::warble::ProfileReply* Arena::CreateMaybeMessage<::warble::ProfileReply>(Arena*);
template<> ::warble::ProfileRequest* Arena::CreateMaybeMessage<::warble::ProfileRequest>(Arena*);
template<> ::warble::ReadReply* Arena::CreateMaybeMessage<::warble::ReadReply>(Arena*);
template<> ::warble::ReadRequest* Arena::CreateMaybeMessage<::warble::ReadRequest>(Arena*);
template<> ::warble::RegisteruserReply* Arena::CreateMaybeMessage<::warble::RegisteruserReply>(Arena*);
template<> ::warble::RegisteruserRequest* Arena::CreateMaybeMessage<::warble::RegisteruserRequest>(Arena*);
template<> ::warble::Timestamp* Arena::CreateMaybeMessage<::warble::Timestamp>(Arena*);
template<> ::warble::Warble* Arena::CreateMaybeMessage<::warble::Warble>(Arena*);
template<> ::warble::WarbleReply* Arena::CreateMaybeMessage<::warble::WarbleReply>(Arena*);
template<> ::warble::WarbleRequest* Arena::CreateMaybeMessage<::warble::WarbleRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace warble {

// ===================================================================

class Timestamp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:warble.Timestamp) */ {
 public:
  Timestamp();
  virtual ~Timestamp();

  Timestamp(const Timestamp& from);
  Timestamp(Timestamp&& from) noexcept
    : Timestamp() {
    *this = ::std::move(from);
  }

  inline Timestamp& operator=(const Timestamp& from) {
    CopyFrom(from);
    return *this;
  }
  inline Timestamp& operator=(Timestamp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Timestamp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Timestamp* internal_default_instance() {
    return reinterpret_cast<const Timestamp*>(
               &_Timestamp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Timestamp& a, Timestamp& b) {
    a.Swap(&b);
  }
  inline void Swap(Timestamp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Timestamp* New() const final {
    return CreateMaybeMessage<Timestamp>(nullptr);
  }

  Timestamp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Timestamp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Timestamp& from);
  void MergeFrom(const Timestamp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Timestamp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "warble.Timestamp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_warble_2eproto);
    return ::descriptor_table_warble_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecondsFieldNumber = 1,
    kUsecondsFieldNumber = 2,
  };
  // int64 seconds = 1;
  void clear_seconds();
  ::PROTOBUF_NAMESPACE_ID::int64 seconds() const;
  void set_seconds(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_seconds() const;
  void _internal_set_seconds(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 useconds = 2;
  void clear_useconds();
  ::PROTOBUF_NAMESPACE_ID::int64 useconds() const;
  void set_useconds(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_useconds() const;
  void _internal_set_useconds(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:warble.Timestamp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 seconds_;
  ::PROTOBUF_NAMESPACE_ID::int64 useconds_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_warble_2eproto;
};
// -------------------------------------------------------------------

class Warble :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:warble.Warble) */ {
 public:
  Warble();
  virtual ~Warble();

  Warble(const Warble& from);
  Warble(Warble&& from) noexcept
    : Warble() {
    *this = ::std::move(from);
  }

  inline Warble& operator=(const Warble& from) {
    CopyFrom(from);
    return *this;
  }
  inline Warble& operator=(Warble&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Warble& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Warble* internal_default_instance() {
    return reinterpret_cast<const Warble*>(
               &_Warble_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Warble& a, Warble& b) {
    a.Swap(&b);
  }
  inline void Swap(Warble* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Warble* New() const final {
    return CreateMaybeMessage<Warble>(nullptr);
  }

  Warble* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Warble>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Warble& from);
  void MergeFrom(const Warble& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Warble* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "warble.Warble";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_warble_2eproto);
    return ::descriptor_table_warble_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kTextFieldNumber = 2,
    kIdFieldNumber = 3,
    kParentIdFieldNumber = 4,
    kTimestampFieldNumber = 5,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string text = 2;
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // bytes id = 3;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const void* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // bytes parent_id = 4;
  void clear_parent_id();
  const std::string& parent_id() const;
  void set_parent_id(const std::string& value);
  void set_parent_id(std::string&& value);
  void set_parent_id(const char* value);
  void set_parent_id(const void* value, size_t size);
  std::string* mutable_parent_id();
  std::string* release_parent_id();
  void set_allocated_parent_id(std::string* parent_id);
  private:
  const std::string& _internal_parent_id() const;
  void _internal_set_parent_id(const std::string& value);
  std::string* _internal_mutable_parent_id();
  public:

  // .warble.Timestamp timestamp = 5;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const ::warble::Timestamp& timestamp() const;
  ::warble::Timestamp* release_timestamp();
  ::warble::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::warble::Timestamp* timestamp);
  private:
  const ::warble::Timestamp& _internal_timestamp() const;
  ::warble::Timestamp* _internal_mutable_timestamp();
  public:

  // @@protoc_insertion_point(class_scope:warble.Warble)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_id_;
  ::warble::Timestamp* timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_warble_2eproto;
};
// -------------------------------------------------------------------

class RegisteruserRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:warble.RegisteruserRequest) */ {
 public:
  RegisteruserRequest();
  virtual ~RegisteruserRequest();

  RegisteruserRequest(const RegisteruserRequest& from);
  RegisteruserRequest(RegisteruserRequest&& from) noexcept
    : RegisteruserRequest() {
    *this = ::std::move(from);
  }

  inline RegisteruserRequest& operator=(const RegisteruserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisteruserRequest& operator=(RegisteruserRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisteruserRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisteruserRequest* internal_default_instance() {
    return reinterpret_cast<const RegisteruserRequest*>(
               &_RegisteruserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RegisteruserRequest& a, RegisteruserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisteruserRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisteruserRequest* New() const final {
    return CreateMaybeMessage<RegisteruserRequest>(nullptr);
  }

  RegisteruserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisteruserRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisteruserRequest& from);
  void MergeFrom(const RegisteruserRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisteruserRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "warble.RegisteruserRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_warble_2eproto);
    return ::descriptor_table_warble_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // @@protoc_insertion_point(class_scope:warble.RegisteruserRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_warble_2eproto;
};
// -------------------------------------------------------------------

class RegisteruserReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:warble.RegisteruserReply) */ {
 public:
  RegisteruserReply();
  virtual ~RegisteruserReply();

  RegisteruserReply(const RegisteruserReply& from);
  RegisteruserReply(RegisteruserReply&& from) noexcept
    : RegisteruserReply() {
    *this = ::std::move(from);
  }

  inline RegisteruserReply& operator=(const RegisteruserReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisteruserReply& operator=(RegisteruserReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisteruserReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisteruserReply* internal_default_instance() {
    return reinterpret_cast<const RegisteruserReply*>(
               &_RegisteruserReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RegisteruserReply& a, RegisteruserReply& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisteruserReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisteruserReply* New() const final {
    return CreateMaybeMessage<RegisteruserReply>(nullptr);
  }

  RegisteruserReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisteruserReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisteruserReply& from);
  void MergeFrom(const RegisteruserReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisteruserReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "warble.RegisteruserReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_warble_2eproto);
    return ::descriptor_table_warble_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:warble.RegisteruserReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_warble_2eproto;
};
// -------------------------------------------------------------------

class WarbleRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:warble.WarbleRequest) */ {
 public:
  WarbleRequest();
  virtual ~WarbleRequest();

  WarbleRequest(const WarbleRequest& from);
  WarbleRequest(WarbleRequest&& from) noexcept
    : WarbleRequest() {
    *this = ::std::move(from);
  }

  inline WarbleRequest& operator=(const WarbleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WarbleRequest& operator=(WarbleRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WarbleRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WarbleRequest* internal_default_instance() {
    return reinterpret_cast<const WarbleRequest*>(
               &_WarbleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(WarbleRequest& a, WarbleRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WarbleRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WarbleRequest* New() const final {
    return CreateMaybeMessage<WarbleRequest>(nullptr);
  }

  WarbleRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WarbleRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WarbleRequest& from);
  void MergeFrom(const WarbleRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WarbleRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "warble.WarbleRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_warble_2eproto);
    return ::descriptor_table_warble_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kTextFieldNumber = 2,
    kParentIdFieldNumber = 3,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string text = 2;
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // bytes parent_id = 3;
  void clear_parent_id();
  const std::string& parent_id() const;
  void set_parent_id(const std::string& value);
  void set_parent_id(std::string&& value);
  void set_parent_id(const char* value);
  void set_parent_id(const void* value, size_t size);
  std::string* mutable_parent_id();
  std::string* release_parent_id();
  void set_allocated_parent_id(std::string* parent_id);
  private:
  const std::string& _internal_parent_id() const;
  void _internal_set_parent_id(const std::string& value);
  std::string* _internal_mutable_parent_id();
  public:

  // @@protoc_insertion_point(class_scope:warble.WarbleRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_warble_2eproto;
};
// -------------------------------------------------------------------

class WarbleReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:warble.WarbleReply) */ {
 public:
  WarbleReply();
  virtual ~WarbleReply();

  WarbleReply(const WarbleReply& from);
  WarbleReply(WarbleReply&& from) noexcept
    : WarbleReply() {
    *this = ::std::move(from);
  }

  inline WarbleReply& operator=(const WarbleReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline WarbleReply& operator=(WarbleReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WarbleReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WarbleReply* internal_default_instance() {
    return reinterpret_cast<const WarbleReply*>(
               &_WarbleReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(WarbleReply& a, WarbleReply& b) {
    a.Swap(&b);
  }
  inline void Swap(WarbleReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WarbleReply* New() const final {
    return CreateMaybeMessage<WarbleReply>(nullptr);
  }

  WarbleReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WarbleReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WarbleReply& from);
  void MergeFrom(const WarbleReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WarbleReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "warble.WarbleReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_warble_2eproto);
    return ::descriptor_table_warble_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWarbleFieldNumber = 1,
  };
  // .warble.Warble warble = 1;
  bool has_warble() const;
  private:
  bool _internal_has_warble() const;
  public:
  void clear_warble();
  const ::warble::Warble& warble() const;
  ::warble::Warble* release_warble();
  ::warble::Warble* mutable_warble();
  void set_allocated_warble(::warble::Warble* warble);
  private:
  const ::warble::Warble& _internal_warble() const;
  ::warble::Warble* _internal_mutable_warble();
  public:

  // @@protoc_insertion_point(class_scope:warble.WarbleReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::warble::Warble* warble_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_warble_2eproto;
};
// -------------------------------------------------------------------

class FollowRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:warble.FollowRequest) */ {
 public:
  FollowRequest();
  virtual ~FollowRequest();

  FollowRequest(const FollowRequest& from);
  FollowRequest(FollowRequest&& from) noexcept
    : FollowRequest() {
    *this = ::std::move(from);
  }

  inline FollowRequest& operator=(const FollowRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FollowRequest& operator=(FollowRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FollowRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FollowRequest* internal_default_instance() {
    return reinterpret_cast<const FollowRequest*>(
               &_FollowRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(FollowRequest& a, FollowRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FollowRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FollowRequest* New() const final {
    return CreateMaybeMessage<FollowRequest>(nullptr);
  }

  FollowRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FollowRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FollowRequest& from);
  void MergeFrom(const FollowRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FollowRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "warble.FollowRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_warble_2eproto);
    return ::descriptor_table_warble_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kToFollowFieldNumber = 2,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string to_follow = 2;
  void clear_to_follow();
  const std::string& to_follow() const;
  void set_to_follow(const std::string& value);
  void set_to_follow(std::string&& value);
  void set_to_follow(const char* value);
  void set_to_follow(const char* value, size_t size);
  std::string* mutable_to_follow();
  std::string* release_to_follow();
  void set_allocated_to_follow(std::string* to_follow);
  private:
  const std::string& _internal_to_follow() const;
  void _internal_set_to_follow(const std::string& value);
  std::string* _internal_mutable_to_follow();
  public:

  // @@protoc_insertion_point(class_scope:warble.FollowRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_follow_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_warble_2eproto;
};
// -------------------------------------------------------------------

class FollowReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:warble.FollowReply) */ {
 public:
  FollowReply();
  virtual ~FollowReply();

  FollowReply(const FollowReply& from);
  FollowReply(FollowReply&& from) noexcept
    : FollowReply() {
    *this = ::std::move(from);
  }

  inline FollowReply& operator=(const FollowReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline FollowReply& operator=(FollowReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FollowReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FollowReply* internal_default_instance() {
    return reinterpret_cast<const FollowReply*>(
               &_FollowReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(FollowReply& a, FollowReply& b) {
    a.Swap(&b);
  }
  inline void Swap(FollowReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FollowReply* New() const final {
    return CreateMaybeMessage<FollowReply>(nullptr);
  }

  FollowReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FollowReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FollowReply& from);
  void MergeFrom(const FollowReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FollowReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "warble.FollowReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_warble_2eproto);
    return ::descriptor_table_warble_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:warble.FollowReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_warble_2eproto;
};
// -------------------------------------------------------------------

class ReadRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:warble.ReadRequest) */ {
 public:
  ReadRequest();
  virtual ~ReadRequest();

  ReadRequest(const ReadRequest& from);
  ReadRequest(ReadRequest&& from) noexcept
    : ReadRequest() {
    *this = ::std::move(from);
  }

  inline ReadRequest& operator=(const ReadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadRequest& operator=(ReadRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadRequest* internal_default_instance() {
    return reinterpret_cast<const ReadRequest*>(
               &_ReadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ReadRequest& a, ReadRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadRequest* New() const final {
    return CreateMaybeMessage<ReadRequest>(nullptr);
  }

  ReadRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadRequest& from);
  void MergeFrom(const ReadRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "warble.ReadRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_warble_2eproto);
    return ::descriptor_table_warble_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWarbleIdFieldNumber = 1,
  };
  // bytes warble_id = 1;
  void clear_warble_id();
  const std::string& warble_id() const;
  void set_warble_id(const std::string& value);
  void set_warble_id(std::string&& value);
  void set_warble_id(const char* value);
  void set_warble_id(const void* value, size_t size);
  std::string* mutable_warble_id();
  std::string* release_warble_id();
  void set_allocated_warble_id(std::string* warble_id);
  private:
  const std::string& _internal_warble_id() const;
  void _internal_set_warble_id(const std::string& value);
  std::string* _internal_mutable_warble_id();
  public:

  // @@protoc_insertion_point(class_scope:warble.ReadRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr warble_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_warble_2eproto;
};
// -------------------------------------------------------------------

class ReadReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:warble.ReadReply) */ {
 public:
  ReadReply();
  virtual ~ReadReply();

  ReadReply(const ReadReply& from);
  ReadReply(ReadReply&& from) noexcept
    : ReadReply() {
    *this = ::std::move(from);
  }

  inline ReadReply& operator=(const ReadReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadReply& operator=(ReadReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadReply* internal_default_instance() {
    return reinterpret_cast<const ReadReply*>(
               &_ReadReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ReadReply& a, ReadReply& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadReply* New() const final {
    return CreateMaybeMessage<ReadReply>(nullptr);
  }

  ReadReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadReply& from);
  void MergeFrom(const ReadReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "warble.ReadReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_warble_2eproto);
    return ::descriptor_table_warble_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWarblesFieldNumber = 1,
  };
  // repeated .warble.Warble warbles = 1;
  int warbles_size() const;
  private:
  int _internal_warbles_size() const;
  public:
  void clear_warbles();
  ::warble::Warble* mutable_warbles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::warble::Warble >*
      mutable_warbles();
  private:
  const ::warble::Warble& _internal_warbles(int index) const;
  ::warble::Warble* _internal_add_warbles();
  public:
  const ::warble::Warble& warbles(int index) const;
  ::warble::Warble* add_warbles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::warble::Warble >&
      warbles() const;

  // @@protoc_insertion_point(class_scope:warble.ReadReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::warble::Warble > warbles_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_warble_2eproto;
};
// -------------------------------------------------------------------

class ProfileRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:warble.ProfileRequest) */ {
 public:
  ProfileRequest();
  virtual ~ProfileRequest();

  ProfileRequest(const ProfileRequest& from);
  ProfileRequest(ProfileRequest&& from) noexcept
    : ProfileRequest() {
    *this = ::std::move(from);
  }

  inline ProfileRequest& operator=(const ProfileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfileRequest& operator=(ProfileRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProfileRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProfileRequest* internal_default_instance() {
    return reinterpret_cast<const ProfileRequest*>(
               &_ProfileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ProfileRequest& a, ProfileRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ProfileRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProfileRequest* New() const final {
    return CreateMaybeMessage<ProfileRequest>(nullptr);
  }

  ProfileRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProfileRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProfileRequest& from);
  void MergeFrom(const ProfileRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfileRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "warble.ProfileRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_warble_2eproto);
    return ::descriptor_table_warble_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // @@protoc_insertion_point(class_scope:warble.ProfileRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_warble_2eproto;
};
// -------------------------------------------------------------------

class ProfileReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:warble.ProfileReply) */ {
 public:
  ProfileReply();
  virtual ~ProfileReply();

  ProfileReply(const ProfileReply& from);
  ProfileReply(ProfileReply&& from) noexcept
    : ProfileReply() {
    *this = ::std::move(from);
  }

  inline ProfileReply& operator=(const ProfileReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfileReply& operator=(ProfileReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProfileReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProfileReply* internal_default_instance() {
    return reinterpret_cast<const ProfileReply*>(
               &_ProfileReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ProfileReply& a, ProfileReply& b) {
    a.Swap(&b);
  }
  inline void Swap(ProfileReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProfileReply* New() const final {
    return CreateMaybeMessage<ProfileReply>(nullptr);
  }

  ProfileReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProfileReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProfileReply& from);
  void MergeFrom(const ProfileReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfileReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "warble.ProfileReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_warble_2eproto);
    return ::descriptor_table_warble_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFollowersFieldNumber = 1,
    kFollowingFieldNumber = 2,
  };
  // repeated string followers = 1;
  int followers_size() const;
  private:
  int _internal_followers_size() const;
  public:
  void clear_followers();
  const std::string& followers(int index) const;
  std::string* mutable_followers(int index);
  void set_followers(int index, const std::string& value);
  void set_followers(int index, std::string&& value);
  void set_followers(int index, const char* value);
  void set_followers(int index, const char* value, size_t size);
  std::string* add_followers();
  void add_followers(const std::string& value);
  void add_followers(std::string&& value);
  void add_followers(const char* value);
  void add_followers(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& followers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_followers();
  private:
  const std::string& _internal_followers(int index) const;
  std::string* _internal_add_followers();
  public:

  // repeated string following = 2;
  int following_size() const;
  private:
  int _internal_following_size() const;
  public:
  void clear_following();
  const std::string& following(int index) const;
  std::string* mutable_following(int index);
  void set_following(int index, const std::string& value);
  void set_following(int index, std::string&& value);
  void set_following(int index, const char* value);
  void set_following(int index, const char* value, size_t size);
  std::string* add_following();
  void add_following(const std::string& value);
  void add_following(std::string&& value);
  void add_following(const char* value);
  void add_following(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& following() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_following();
  private:
  const std::string& _internal_following(int index) const;
  std::string* _internal_add_following();
  public:

  // @@protoc_insertion_point(class_scope:warble.ProfileReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> followers_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> following_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_warble_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Timestamp

// int64 seconds = 1;
inline void Timestamp::clear_seconds() {
  seconds_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Timestamp::_internal_seconds() const {
  return seconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Timestamp::seconds() const {
  // @@protoc_insertion_point(field_get:warble.Timestamp.seconds)
  return _internal_seconds();
}
inline void Timestamp::_internal_set_seconds(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  seconds_ = value;
}
inline void Timestamp::set_seconds(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_seconds(value);
  // @@protoc_insertion_point(field_set:warble.Timestamp.seconds)
}

// int64 useconds = 2;
inline void Timestamp::clear_useconds() {
  useconds_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Timestamp::_internal_useconds() const {
  return useconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Timestamp::useconds() const {
  // @@protoc_insertion_point(field_get:warble.Timestamp.useconds)
  return _internal_useconds();
}
inline void Timestamp::_internal_set_useconds(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  useconds_ = value;
}
inline void Timestamp::set_useconds(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_useconds(value);
  // @@protoc_insertion_point(field_set:warble.Timestamp.useconds)
}

// -------------------------------------------------------------------

// Warble

// string username = 1;
inline void Warble::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Warble::username() const {
  // @@protoc_insertion_point(field_get:warble.Warble.username)
  return _internal_username();
}
inline void Warble::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:warble.Warble.username)
}
inline std::string* Warble::mutable_username() {
  // @@protoc_insertion_point(field_mutable:warble.Warble.username)
  return _internal_mutable_username();
}
inline const std::string& Warble::_internal_username() const {
  return username_.GetNoArena();
}
inline void Warble::_internal_set_username(const std::string& value) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Warble::set_username(std::string&& value) {
  
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:warble.Warble.username)
}
inline void Warble::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:warble.Warble.username)
}
inline void Warble::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:warble.Warble.username)
}
inline std::string* Warble::_internal_mutable_username() {
  
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Warble::release_username() {
  // @@protoc_insertion_point(field_release:warble.Warble.username)
  
  return username_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Warble::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:warble.Warble.username)
}

// string text = 2;
inline void Warble::clear_text() {
  text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Warble::text() const {
  // @@protoc_insertion_point(field_get:warble.Warble.text)
  return _internal_text();
}
inline void Warble::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:warble.Warble.text)
}
inline std::string* Warble::mutable_text() {
  // @@protoc_insertion_point(field_mutable:warble.Warble.text)
  return _internal_mutable_text();
}
inline const std::string& Warble::_internal_text() const {
  return text_.GetNoArena();
}
inline void Warble::_internal_set_text(const std::string& value) {
  
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Warble::set_text(std::string&& value) {
  
  text_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:warble.Warble.text)
}
inline void Warble::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:warble.Warble.text)
}
inline void Warble::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:warble.Warble.text)
}
inline std::string* Warble::_internal_mutable_text() {
  
  return text_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Warble::release_text() {
  // @@protoc_insertion_point(field_release:warble.Warble.text)
  
  return text_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Warble::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:warble.Warble.text)
}

// bytes id = 3;
inline void Warble::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Warble::id() const {
  // @@protoc_insertion_point(field_get:warble.Warble.id)
  return _internal_id();
}
inline void Warble::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:warble.Warble.id)
}
inline std::string* Warble::mutable_id() {
  // @@protoc_insertion_point(field_mutable:warble.Warble.id)
  return _internal_mutable_id();
}
inline const std::string& Warble::_internal_id() const {
  return id_.GetNoArena();
}
inline void Warble::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Warble::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:warble.Warble.id)
}
inline void Warble::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:warble.Warble.id)
}
inline void Warble::set_id(const void* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:warble.Warble.id)
}
inline std::string* Warble::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Warble::release_id() {
  // @@protoc_insertion_point(field_release:warble.Warble.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Warble::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:warble.Warble.id)
}

// bytes parent_id = 4;
inline void Warble::clear_parent_id() {
  parent_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Warble::parent_id() const {
  // @@protoc_insertion_point(field_get:warble.Warble.parent_id)
  return _internal_parent_id();
}
inline void Warble::set_parent_id(const std::string& value) {
  _internal_set_parent_id(value);
  // @@protoc_insertion_point(field_set:warble.Warble.parent_id)
}
inline std::string* Warble::mutable_parent_id() {
  // @@protoc_insertion_point(field_mutable:warble.Warble.parent_id)
  return _internal_mutable_parent_id();
}
inline const std::string& Warble::_internal_parent_id() const {
  return parent_id_.GetNoArena();
}
inline void Warble::_internal_set_parent_id(const std::string& value) {
  
  parent_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Warble::set_parent_id(std::string&& value) {
  
  parent_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:warble.Warble.parent_id)
}
inline void Warble::set_parent_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parent_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:warble.Warble.parent_id)
}
inline void Warble::set_parent_id(const void* value, size_t size) {
  
  parent_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:warble.Warble.parent_id)
}
inline std::string* Warble::_internal_mutable_parent_id() {
  
  return parent_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Warble::release_parent_id() {
  // @@protoc_insertion_point(field_release:warble.Warble.parent_id)
  
  return parent_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Warble::set_allocated_parent_id(std::string* parent_id) {
  if (parent_id != nullptr) {
    
  } else {
    
  }
  parent_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent_id);
  // @@protoc_insertion_point(field_set_allocated:warble.Warble.parent_id)
}

// .warble.Timestamp timestamp = 5;
inline bool Warble::_internal_has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != nullptr;
}
inline bool Warble::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void Warble::clear_timestamp() {
  if (GetArenaNoVirtual() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
inline const ::warble::Timestamp& Warble::_internal_timestamp() const {
  const ::warble::Timestamp* p = timestamp_;
  return p != nullptr ? *p : *reinterpret_cast<const ::warble::Timestamp*>(
      &::warble::_Timestamp_default_instance_);
}
inline const ::warble::Timestamp& Warble::timestamp() const {
  // @@protoc_insertion_point(field_get:warble.Warble.timestamp)
  return _internal_timestamp();
}
inline ::warble::Timestamp* Warble::release_timestamp() {
  // @@protoc_insertion_point(field_release:warble.Warble.timestamp)
  
  ::warble::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline ::warble::Timestamp* Warble::_internal_mutable_timestamp() {
  
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::warble::Timestamp>(GetArenaNoVirtual());
    timestamp_ = p;
  }
  return timestamp_;
}
inline ::warble::Timestamp* Warble::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:warble.Warble.timestamp)
  return _internal_mutable_timestamp();
}
inline void Warble::set_allocated_timestamp(::warble::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete timestamp_;
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:warble.Warble.timestamp)
}

// -------------------------------------------------------------------

// RegisteruserRequest

// string username = 1;
inline void RegisteruserRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RegisteruserRequest::username() const {
  // @@protoc_insertion_point(field_get:warble.RegisteruserRequest.username)
  return _internal_username();
}
inline void RegisteruserRequest::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:warble.RegisteruserRequest.username)
}
inline std::string* RegisteruserRequest::mutable_username() {
  // @@protoc_insertion_point(field_mutable:warble.RegisteruserRequest.username)
  return _internal_mutable_username();
}
inline const std::string& RegisteruserRequest::_internal_username() const {
  return username_.GetNoArena();
}
inline void RegisteruserRequest::_internal_set_username(const std::string& value) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RegisteruserRequest::set_username(std::string&& value) {
  
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:warble.RegisteruserRequest.username)
}
inline void RegisteruserRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:warble.RegisteruserRequest.username)
}
inline void RegisteruserRequest::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:warble.RegisteruserRequest.username)
}
inline std::string* RegisteruserRequest::_internal_mutable_username() {
  
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RegisteruserRequest::release_username() {
  // @@protoc_insertion_point(field_release:warble.RegisteruserRequest.username)
  
  return username_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RegisteruserRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:warble.RegisteruserRequest.username)
}

// -------------------------------------------------------------------

// RegisteruserReply

// -------------------------------------------------------------------

// WarbleRequest

// string username = 1;
inline void WarbleRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& WarbleRequest::username() const {
  // @@protoc_insertion_point(field_get:warble.WarbleRequest.username)
  return _internal_username();
}
inline void WarbleRequest::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:warble.WarbleRequest.username)
}
inline std::string* WarbleRequest::mutable_username() {
  // @@protoc_insertion_point(field_mutable:warble.WarbleRequest.username)
  return _internal_mutable_username();
}
inline const std::string& WarbleRequest::_internal_username() const {
  return username_.GetNoArena();
}
inline void WarbleRequest::_internal_set_username(const std::string& value) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void WarbleRequest::set_username(std::string&& value) {
  
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:warble.WarbleRequest.username)
}
inline void WarbleRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:warble.WarbleRequest.username)
}
inline void WarbleRequest::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:warble.WarbleRequest.username)
}
inline std::string* WarbleRequest::_internal_mutable_username() {
  
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WarbleRequest::release_username() {
  // @@protoc_insertion_point(field_release:warble.WarbleRequest.username)
  
  return username_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WarbleRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:warble.WarbleRequest.username)
}

// string text = 2;
inline void WarbleRequest::clear_text() {
  text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& WarbleRequest::text() const {
  // @@protoc_insertion_point(field_get:warble.WarbleRequest.text)
  return _internal_text();
}
inline void WarbleRequest::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:warble.WarbleRequest.text)
}
inline std::string* WarbleRequest::mutable_text() {
  // @@protoc_insertion_point(field_mutable:warble.WarbleRequest.text)
  return _internal_mutable_text();
}
inline const std::string& WarbleRequest::_internal_text() const {
  return text_.GetNoArena();
}
inline void WarbleRequest::_internal_set_text(const std::string& value) {
  
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void WarbleRequest::set_text(std::string&& value) {
  
  text_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:warble.WarbleRequest.text)
}
inline void WarbleRequest::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:warble.WarbleRequest.text)
}
inline void WarbleRequest::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:warble.WarbleRequest.text)
}
inline std::string* WarbleRequest::_internal_mutable_text() {
  
  return text_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WarbleRequest::release_text() {
  // @@protoc_insertion_point(field_release:warble.WarbleRequest.text)
  
  return text_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WarbleRequest::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:warble.WarbleRequest.text)
}

// bytes parent_id = 3;
inline void WarbleRequest::clear_parent_id() {
  parent_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& WarbleRequest::parent_id() const {
  // @@protoc_insertion_point(field_get:warble.WarbleRequest.parent_id)
  return _internal_parent_id();
}
inline void WarbleRequest::set_parent_id(const std::string& value) {
  _internal_set_parent_id(value);
  // @@protoc_insertion_point(field_set:warble.WarbleRequest.parent_id)
}
inline std::string* WarbleRequest::mutable_parent_id() {
  // @@protoc_insertion_point(field_mutable:warble.WarbleRequest.parent_id)
  return _internal_mutable_parent_id();
}
inline const std::string& WarbleRequest::_internal_parent_id() const {
  return parent_id_.GetNoArena();
}
inline void WarbleRequest::_internal_set_parent_id(const std::string& value) {
  
  parent_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void WarbleRequest::set_parent_id(std::string&& value) {
  
  parent_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:warble.WarbleRequest.parent_id)
}
inline void WarbleRequest::set_parent_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parent_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:warble.WarbleRequest.parent_id)
}
inline void WarbleRequest::set_parent_id(const void* value, size_t size) {
  
  parent_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:warble.WarbleRequest.parent_id)
}
inline std::string* WarbleRequest::_internal_mutable_parent_id() {
  
  return parent_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WarbleRequest::release_parent_id() {
  // @@protoc_insertion_point(field_release:warble.WarbleRequest.parent_id)
  
  return parent_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WarbleRequest::set_allocated_parent_id(std::string* parent_id) {
  if (parent_id != nullptr) {
    
  } else {
    
  }
  parent_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent_id);
  // @@protoc_insertion_point(field_set_allocated:warble.WarbleRequest.parent_id)
}

// -------------------------------------------------------------------

// WarbleReply

// .warble.Warble warble = 1;
inline bool WarbleReply::_internal_has_warble() const {
  return this != internal_default_instance() && warble_ != nullptr;
}
inline bool WarbleReply::has_warble() const {
  return _internal_has_warble();
}
inline void WarbleReply::clear_warble() {
  if (GetArenaNoVirtual() == nullptr && warble_ != nullptr) {
    delete warble_;
  }
  warble_ = nullptr;
}
inline const ::warble::Warble& WarbleReply::_internal_warble() const {
  const ::warble::Warble* p = warble_;
  return p != nullptr ? *p : *reinterpret_cast<const ::warble::Warble*>(
      &::warble::_Warble_default_instance_);
}
inline const ::warble::Warble& WarbleReply::warble() const {
  // @@protoc_insertion_point(field_get:warble.WarbleReply.warble)
  return _internal_warble();
}
inline ::warble::Warble* WarbleReply::release_warble() {
  // @@protoc_insertion_point(field_release:warble.WarbleReply.warble)
  
  ::warble::Warble* temp = warble_;
  warble_ = nullptr;
  return temp;
}
inline ::warble::Warble* WarbleReply::_internal_mutable_warble() {
  
  if (warble_ == nullptr) {
    auto* p = CreateMaybeMessage<::warble::Warble>(GetArenaNoVirtual());
    warble_ = p;
  }
  return warble_;
}
inline ::warble::Warble* WarbleReply::mutable_warble() {
  // @@protoc_insertion_point(field_mutable:warble.WarbleReply.warble)
  return _internal_mutable_warble();
}
inline void WarbleReply::set_allocated_warble(::warble::Warble* warble) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete warble_;
  }
  if (warble) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      warble = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, warble, submessage_arena);
    }
    
  } else {
    
  }
  warble_ = warble;
  // @@protoc_insertion_point(field_set_allocated:warble.WarbleReply.warble)
}

// -------------------------------------------------------------------

// FollowRequest

// string username = 1;
inline void FollowRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FollowRequest::username() const {
  // @@protoc_insertion_point(field_get:warble.FollowRequest.username)
  return _internal_username();
}
inline void FollowRequest::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:warble.FollowRequest.username)
}
inline std::string* FollowRequest::mutable_username() {
  // @@protoc_insertion_point(field_mutable:warble.FollowRequest.username)
  return _internal_mutable_username();
}
inline const std::string& FollowRequest::_internal_username() const {
  return username_.GetNoArena();
}
inline void FollowRequest::_internal_set_username(const std::string& value) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FollowRequest::set_username(std::string&& value) {
  
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:warble.FollowRequest.username)
}
inline void FollowRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:warble.FollowRequest.username)
}
inline void FollowRequest::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:warble.FollowRequest.username)
}
inline std::string* FollowRequest::_internal_mutable_username() {
  
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FollowRequest::release_username() {
  // @@protoc_insertion_point(field_release:warble.FollowRequest.username)
  
  return username_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FollowRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:warble.FollowRequest.username)
}

// string to_follow = 2;
inline void FollowRequest::clear_to_follow() {
  to_follow_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FollowRequest::to_follow() const {
  // @@protoc_insertion_point(field_get:warble.FollowRequest.to_follow)
  return _internal_to_follow();
}
inline void FollowRequest::set_to_follow(const std::string& value) {
  _internal_set_to_follow(value);
  // @@protoc_insertion_point(field_set:warble.FollowRequest.to_follow)
}
inline std::string* FollowRequest::mutable_to_follow() {
  // @@protoc_insertion_point(field_mutable:warble.FollowRequest.to_follow)
  return _internal_mutable_to_follow();
}
inline const std::string& FollowRequest::_internal_to_follow() const {
  return to_follow_.GetNoArena();
}
inline void FollowRequest::_internal_set_to_follow(const std::string& value) {
  
  to_follow_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FollowRequest::set_to_follow(std::string&& value) {
  
  to_follow_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:warble.FollowRequest.to_follow)
}
inline void FollowRequest::set_to_follow(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  to_follow_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:warble.FollowRequest.to_follow)
}
inline void FollowRequest::set_to_follow(const char* value, size_t size) {
  
  to_follow_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:warble.FollowRequest.to_follow)
}
inline std::string* FollowRequest::_internal_mutable_to_follow() {
  
  return to_follow_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FollowRequest::release_to_follow() {
  // @@protoc_insertion_point(field_release:warble.FollowRequest.to_follow)
  
  return to_follow_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FollowRequest::set_allocated_to_follow(std::string* to_follow) {
  if (to_follow != nullptr) {
    
  } else {
    
  }
  to_follow_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to_follow);
  // @@protoc_insertion_point(field_set_allocated:warble.FollowRequest.to_follow)
}

// -------------------------------------------------------------------

// FollowReply

// -------------------------------------------------------------------

// ReadRequest

// bytes warble_id = 1;
inline void ReadRequest::clear_warble_id() {
  warble_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReadRequest::warble_id() const {
  // @@protoc_insertion_point(field_get:warble.ReadRequest.warble_id)
  return _internal_warble_id();
}
inline void ReadRequest::set_warble_id(const std::string& value) {
  _internal_set_warble_id(value);
  // @@protoc_insertion_point(field_set:warble.ReadRequest.warble_id)
}
inline std::string* ReadRequest::mutable_warble_id() {
  // @@protoc_insertion_point(field_mutable:warble.ReadRequest.warble_id)
  return _internal_mutable_warble_id();
}
inline const std::string& ReadRequest::_internal_warble_id() const {
  return warble_id_.GetNoArena();
}
inline void ReadRequest::_internal_set_warble_id(const std::string& value) {
  
  warble_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ReadRequest::set_warble_id(std::string&& value) {
  
  warble_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:warble.ReadRequest.warble_id)
}
inline void ReadRequest::set_warble_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  warble_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:warble.ReadRequest.warble_id)
}
inline void ReadRequest::set_warble_id(const void* value, size_t size) {
  
  warble_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:warble.ReadRequest.warble_id)
}
inline std::string* ReadRequest::_internal_mutable_warble_id() {
  
  return warble_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReadRequest::release_warble_id() {
  // @@protoc_insertion_point(field_release:warble.ReadRequest.warble_id)
  
  return warble_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReadRequest::set_allocated_warble_id(std::string* warble_id) {
  if (warble_id != nullptr) {
    
  } else {
    
  }
  warble_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), warble_id);
  // @@protoc_insertion_point(field_set_allocated:warble.ReadRequest.warble_id)
}

// -------------------------------------------------------------------

// ReadReply

// repeated .warble.Warble warbles = 1;
inline int ReadReply::_internal_warbles_size() const {
  return warbles_.size();
}
inline int ReadReply::warbles_size() const {
  return _internal_warbles_size();
}
inline void ReadReply::clear_warbles() {
  warbles_.Clear();
}
inline ::warble::Warble* ReadReply::mutable_warbles(int index) {
  // @@protoc_insertion_point(field_mutable:warble.ReadReply.warbles)
  return warbles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::warble::Warble >*
ReadReply::mutable_warbles() {
  // @@protoc_insertion_point(field_mutable_list:warble.ReadReply.warbles)
  return &warbles_;
}
inline const ::warble::Warble& ReadReply::_internal_warbles(int index) const {
  return warbles_.Get(index);
}
inline const ::warble::Warble& ReadReply::warbles(int index) const {
  // @@protoc_insertion_point(field_get:warble.ReadReply.warbles)
  return _internal_warbles(index);
}
inline ::warble::Warble* ReadReply::_internal_add_warbles() {
  return warbles_.Add();
}
inline ::warble::Warble* ReadReply::add_warbles() {
  // @@protoc_insertion_point(field_add:warble.ReadReply.warbles)
  return _internal_add_warbles();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::warble::Warble >&
ReadReply::warbles() const {
  // @@protoc_insertion_point(field_list:warble.ReadReply.warbles)
  return warbles_;
}

// -------------------------------------------------------------------

// ProfileRequest

// string username = 1;
inline void ProfileRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProfileRequest::username() const {
  // @@protoc_insertion_point(field_get:warble.ProfileRequest.username)
  return _internal_username();
}
inline void ProfileRequest::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:warble.ProfileRequest.username)
}
inline std::string* ProfileRequest::mutable_username() {
  // @@protoc_insertion_point(field_mutable:warble.ProfileRequest.username)
  return _internal_mutable_username();
}
inline const std::string& ProfileRequest::_internal_username() const {
  return username_.GetNoArena();
}
inline void ProfileRequest::_internal_set_username(const std::string& value) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProfileRequest::set_username(std::string&& value) {
  
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:warble.ProfileRequest.username)
}
inline void ProfileRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:warble.ProfileRequest.username)
}
inline void ProfileRequest::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:warble.ProfileRequest.username)
}
inline std::string* ProfileRequest::_internal_mutable_username() {
  
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProfileRequest::release_username() {
  // @@protoc_insertion_point(field_release:warble.ProfileRequest.username)
  
  return username_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProfileRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:warble.ProfileRequest.username)
}

// -------------------------------------------------------------------

// ProfileReply

// repeated string followers = 1;
inline int ProfileReply::_internal_followers_size() const {
  return followers_.size();
}
inline int ProfileReply::followers_size() const {
  return _internal_followers_size();
}
inline void ProfileReply::clear_followers() {
  followers_.Clear();
}
inline std::string* ProfileReply::add_followers() {
  // @@protoc_insertion_point(field_add_mutable:warble.ProfileReply.followers)
  return _internal_add_followers();
}
inline const std::string& ProfileReply::_internal_followers(int index) const {
  return followers_.Get(index);
}
inline const std::string& ProfileReply::followers(int index) const {
  // @@protoc_insertion_point(field_get:warble.ProfileReply.followers)
  return _internal_followers(index);
}
inline std::string* ProfileReply::mutable_followers(int index) {
  // @@protoc_insertion_point(field_mutable:warble.ProfileReply.followers)
  return followers_.Mutable(index);
}
inline void ProfileReply::set_followers(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:warble.ProfileReply.followers)
  followers_.Mutable(index)->assign(value);
}
inline void ProfileReply::set_followers(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:warble.ProfileReply.followers)
  followers_.Mutable(index)->assign(std::move(value));
}
inline void ProfileReply::set_followers(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  followers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:warble.ProfileReply.followers)
}
inline void ProfileReply::set_followers(int index, const char* value, size_t size) {
  followers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:warble.ProfileReply.followers)
}
inline std::string* ProfileReply::_internal_add_followers() {
  return followers_.Add();
}
inline void ProfileReply::add_followers(const std::string& value) {
  followers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:warble.ProfileReply.followers)
}
inline void ProfileReply::add_followers(std::string&& value) {
  followers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:warble.ProfileReply.followers)
}
inline void ProfileReply::add_followers(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  followers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:warble.ProfileReply.followers)
}
inline void ProfileReply::add_followers(const char* value, size_t size) {
  followers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:warble.ProfileReply.followers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ProfileReply::followers() const {
  // @@protoc_insertion_point(field_list:warble.ProfileReply.followers)
  return followers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ProfileReply::mutable_followers() {
  // @@protoc_insertion_point(field_mutable_list:warble.ProfileReply.followers)
  return &followers_;
}

// repeated string following = 2;
inline int ProfileReply::_internal_following_size() const {
  return following_.size();
}
inline int ProfileReply::following_size() const {
  return _internal_following_size();
}
inline void ProfileReply::clear_following() {
  following_.Clear();
}
inline std::string* ProfileReply::add_following() {
  // @@protoc_insertion_point(field_add_mutable:warble.ProfileReply.following)
  return _internal_add_following();
}
inline const std::string& ProfileReply::_internal_following(int index) const {
  return following_.Get(index);
}
inline const std::string& ProfileReply::following(int index) const {
  // @@protoc_insertion_point(field_get:warble.ProfileReply.following)
  return _internal_following(index);
}
inline std::string* ProfileReply::mutable_following(int index) {
  // @@protoc_insertion_point(field_mutable:warble.ProfileReply.following)
  return following_.Mutable(index);
}
inline void ProfileReply::set_following(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:warble.ProfileReply.following)
  following_.Mutable(index)->assign(value);
}
inline void ProfileReply::set_following(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:warble.ProfileReply.following)
  following_.Mutable(index)->assign(std::move(value));
}
inline void ProfileReply::set_following(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  following_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:warble.ProfileReply.following)
}
inline void ProfileReply::set_following(int index, const char* value, size_t size) {
  following_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:warble.ProfileReply.following)
}
inline std::string* ProfileReply::_internal_add_following() {
  return following_.Add();
}
inline void ProfileReply::add_following(const std::string& value) {
  following_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:warble.ProfileReply.following)
}
inline void ProfileReply::add_following(std::string&& value) {
  following_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:warble.ProfileReply.following)
}
inline void ProfileReply::add_following(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  following_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:warble.ProfileReply.following)
}
inline void ProfileReply::add_following(const char* value, size_t size) {
  following_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:warble.ProfileReply.following)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ProfileReply::following() const {
  // @@protoc_insertion_point(field_list:warble.ProfileReply.following)
  return following_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ProfileReply::mutable_following() {
  // @@protoc_insertion_point(field_mutable_list:warble.ProfileReply.following)
  return &following_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace warble

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_warble_2eproto
